h2. A Guide to The Rails Command Line

Rails comes with every command line tool you'll need to

* Create a Rails application
* Generate models, controllers, database migrations, and unit tests
* Start a development server
* Experiment with objects through an interactive shell
* Profile and benchmark your new creation

endprologue.

NOTE: This tutorial assumes you have basic Rails knowledge from reading the "Getting Started with Rails Guide":getting_started.html.

WARNING. This Guide is based on Rails 3.0. Some of the code shown here will not work in earlier versions of Rails.

h3. Command Line Basics

There are a few commands that are absolutely critical to your everyday usage of Rails. In the order of how much you'll probably use them are:

* <tt>rails console</tt>
* <tt>rails server</tt>
* <tt>rake</tt>
* <tt>rails generate</tt>
* <tt>rails dbconsole</tt>
* <tt>rails new app_name</tt>

Let's create a simple Rails application to step through each of these commands in context.

h4. +rails new+

The first thing we'll want to do is create a new Rails application by running the +rails new+ command after installing Rails.

WARNING: You can install the rails gem by typing +gem install rails+, if you don't have it already. Follow the instructions in the "Rails 3 Release Notes":/3_0_release_notes.html

<shell>
$ rails new commandsapp
     create
     create  README.rdoc
     create  .gitignore
     create  Rakefile
     create  config.ru
     create  Gemfile
     create  app
     ...
     create  tmp/cache
     create  tmp/pids
     create  vendor/plugins
     create  vendor/plugins/.gitkeep
</shell>

Rails will set you up with what seems like a huge amount of stuff for such a tiny command! You've got the entire Rails directory structure now with all the code you need to run our simple application right out of the box.

h4. +rails server+

The +rails server+ command launches a small web server named WEBrick which comes bundled with Ruby. You'll use this any time you want to access your application through a web browser.

INFO: WEBrick isn't your only option for serving Rails. We'll get to that "later":#different-servers.

With no further work, +rails server+ will run our new shiny Rails app:

<shell>
$ cd commandsapp
$ rails server
=> Booting WEBrick
=> Rails 3.1.0 application starting in development on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
[2010-04-18 03:20:33] INFO  WEBrick 1.3.1
[2010-04-18 03:20:33] INFO  ruby 1.8.7 (2010-01-10) [x86_64-linux]
[2010-04-18 03:20:33] INFO  WEBrick::HTTPServer#start: pid=26086 port=3000
</shell>

With just three commands we whipped up a Rails server listening on port 3000. Go to your browser and open "http://localhost:3000":http://localhost:3000, you will see a basic Rails app running.

You can also use the alias "s" to start the server: <tt>rails s</tt>.

The server can be run on a different port using the +-p+ option. The default development environment can be changed using +-e+.

<shell>
$ rails server -e production -p 4000
</shell>

The +-b+ option binds Rails to the specified ip, by default it is 0.0.0.0. You can run a server as a daemon by passing a +-d+ option.

h4. +rails generate+

The +rails generate+ command uses templates to create a whole lot of things. Running +rails generate+ by itself gives a list of available generators:

You can also use the alias "g" to invoke the generator command: <tt>rails g</tt>.

<shell>
$ rails generate
Usage: rails generate GENERATOR [args] [options]

...
...

Please choose a generator below.

Rails:
  controller
  generator
  ...
  ...
</shell>

NOTE: You can install more generators through generator gems, portions of plugins you'll undoubtedly install, and you can even create your own!

Using generators will save you a large amount of time by writing *boilerplate code*, code that is necessary for the app to work.

Let's make our own controller with the controller generator. But what command should we use? Let's ask the generator:

INFO: All Rails console utilities have help text. As with most *nix utilities, you can try adding +--help+ or +-h+ to the end, for example +rails server --help+.

<shell>
$ rails generate controller
Usage: rails generate controller NAME [action action] [options]

...
...

Example:
    rails generate controller CreditCard open debit credit close

    Credit card controller with URLs like /credit_card/debit.
        Controller: app/controllers/credit_card_controller.rb
        Views:      app/views/credit_card/debit.html.erb [...]
        Helper:     app/helpers/credit_card_helper.rb
        Test:       test/functional/credit_card_controller_test.rb

Modules Example:
    rails generate controller 'admin/credit_card' suspend late_fee

    Credit card admin controller with URLs like /admin/credit_card/suspend.
        Controller: app/controllers/admin/credit_card_controller.rb
        Views:      app/views/admin/credit_card/debit.html.erb [...]
        Helper:     app/helpers/admin/credit_card_helper.rb
        Test:       test/functional/admin/credit_card_controller_test.rb
</shell>

The controller generator is expecting parameters in the form of +generate controller ControllerName action1 action2+. Let's make a +Greetings+ controller with an action of *hello*, which will say something nice to us.

<shell>
$ rails generate controller Greetings hello
     create  app/controllers/greetings_controller.rb
      route  get "greetings/hello"
     invoke  erb
     create    app/views/greetings
     create    app/views/greetings/hello.html.erb
     invoke  test_unit
     create    test/functional/greetings_controller_test.rb
     invoke  helper
     create    app/helpers/greetings_helper.rb
     invoke    test_unit
     create      test/unit/helpers/greetings_helper_test.rb
     invoke  assets
     create    app/assets/javascripts/greetings.js
     invoke    css
     create      app/assets/stylesheets/greetings.css

</shell>

What all did this generate? It made sure a bunch of directories were in our application, and created a controller file, a view file, a functional test file, a helper for the view, a javascript file and a stylesheet file.

Check out the controller and modify it a little (in +app/controllers/greetings_controller.rb+):

<ruby>
class GreetingsController < ApplicationController
  def hello
    @message = "Hello, how are you today?"
  end
end
</ruby>

Then the view, to display our message (in +app/views/greetings/hello.html.erb+):

<html>
<h1>A Greeting for You!</h1>
<p><%= @message %></p>
</html>

Fire up your server using +rails server+.

<shell>
$ rails server
=> Booting WEBrick...
</shell>

WARNING: Make sure that you do not have any "tilde backup" files in +app/views/(controller)+, or else WEBrick will _not_ show the expected output. This seems to be a *bug* in Rails 2.3.0.

The URL will be "http://localhost:3000/greetings/hello":http://localhost:3000/greetings/hello.

INFO: With a normal, plain-old Rails application, your URLs will generally follow the pattern of http://(host)/(controller)/(action), and a URL like http://(host)/(controller) will hit the *index* action of that controller.

Rails comes with a generator for data models too.

<shell>
$ rails generate model
Usage: rails generate model NAME [field:type field:type] [options]

...

Examples:
    rails generate model account

            Model:      app/models/account.rb
            Test:       test/unit/account_test.rb
            Fixtures:   test/fixtures/accounts.yml
            Migration:  db/migrate/XXX_add_accounts.rb

    rails generate model post title:string body:text published:boolean

        Creates a Post model with a string title, text body, and published flag.
</shell>

NOTE: For a list of available field types, refer to the "API documentation":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column for the column method for the +TableDefinition+ class.

But instead of generating a model directly (which we'll be doing later), let's set up a scaffold. A *scaffold* in Rails is a full set of model, database migration for that model, controller to manipulate it, views to view and manipulate the data, and a test suite for each of the above.

We will set up a simple resource called "HighScore" that will keep track of our highest score on video games we play.

<shell>
$ rails generate scaffold HighScore game:string score:integer
    exists  app/models/
    exists  app/controllers/
    exists  app/helpers/
    create  app/views/high_scores
    create  app/views/layouts/
    exists  test/functional/
    create  test/unit/
    create  app/assets/stylesheets/
    create  app/views/high_scores/index.html.erb
    create  app/views/high_scores/show.html.erb
    create  app/views/high_scores/new.html.erb
    create  app/views/high_scores/edit.html.erb
    create  app/views/layouts/high_scores.html.erb
    create  app/assets/stylesheets/scaffold.css.scss
    create  app/controllers/high_scores_controller.rb
    create  test/functional/high_scores_controller_test.rb
    create  app/helpers/high_scores_helper.rb
     route  resources :high_scores
dependency  model
    exists    app/models/
    exists    test/unit/
    create    test/fixtures/
    create    app/models/high_score.rb
    create    test/unit/high_score_test.rb
    create    test/fixtures/high_scores.yml
    exists    db/migrate
    create    db/migrate/20100209025147_create_high_scores.rb
</shell>

The generator checks that there exist the directories for models, controllers, helpers, layouts, functional and unit tests, stylesheets, creates the views, controller, model and database migration for HighScore (creating the +high_scores+ table and fields), takes care of the route for the *resource*, and new tests for everything.

The migration requires that we *migrate*, that is, run some Ruby code (living in that +20100209025147_create_high_scores.rb+) to modify the schema of our database. Which database? The sqlite3 database that Rails will create for you when we run the +rake db:migrate+ command. We'll talk more about Rake in-depth in a little while.

<shell>
$ rake db:migrate
(in /home/foobar/commandsapp)
==  CreateHighScores: migrating ===============================================
-- create_table(:high_scores)
   -> 0.0026s
==  CreateHighScores: migrated (0.0028s) ======================================
</shell>

INFO: Let's talk about unit tests. Unit tests are code that tests and makes assertions about code. In unit testing, we take a little part of code, say a method of a model, and test its inputs and outputs. Unit tests are your friend. The sooner you make peace with the fact that your quality of life will drastically increase when you unit test your code, the better. Seriously. We'll make one in a moment.

Let's see the interface Rails created for us.

<shell>
$ rails server
</shell>

Go to your browser and open "http://localhost:3000/high_scores":http://localhost:3000/high_scores, now we can create new high scores (55,160 on Space Invaders!)

h4. +rails console+

The +console+ command lets you interact with your Rails application from the command line. On the underside, +rails console+ uses IRB, so if you've ever used it, you'll be right at home. This is useful for testing out quick ideas with code and changing data server-side without touching the website.

You can also use the alias "c" to invoke the console: <tt>rails c</tt>.

If you wish to test out some code without changing any data, you can do that by invoking +rails console --sandbox+.

<shell>
$ rails console --sandbox
Loading development environment in sandbox (Rails 3.1.0)
Any modifications you make will be rolled back on exit
irb(main):001:0>
</shell>

h4. +rails dbconsole+

+rails dbconsole+ figures out which database you're using and drops you into whichever command line interface you would use with it (and figures out the command line parameters to give to it, too!). It supports MySQL, PostgreSQL, SQLite and SQLite3.

You can also use the alias "db" to invoke the dbconsole: <tt>rails db</tt>.

h4. +rails plugin+

The +rails plugin+ command simplifies plugin management. Plugins can be installed by name or their repository URLs. You need to have Git installed if you want to install a plugin from a Git repo. The same holds for Subversion too.

<shell>
$ rails plugin install https://github.com/technoweenie/acts_as_paranoid.git
+ ./CHANGELOG
+ ./MIT-LICENSE
...
...
</shell>

h4. +rails runner+

<tt>runner</tt> runs Ruby code in the context of Rails non-interactively. For instance:

<shell>
$ rails runner "Model.long_running_method"
</shell>

You can also use the alias "r" to invoke the runner: <tt>rails r</tt>.

You can specify the environment in which the +runner+ command should operate using the +-e+ switch.

<shell>
$ rails runner -e staging "Model.long_running_method"
</shell>

h4. +rails destroy+

Think of +destroy+ as the opposite of +generate+. It'll figure out what generate did, and undo it.

You can also use the alias "d" to invoke the destroy command: <tt>rails d</tt>.

<shell>
$ rails generate model Oops
      exists  app/models/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/oops.rb
      create  test/unit/oops_test.rb
      create  test/fixtures/oops.yml
      exists  db/migrate
      create  db/migrate/20081221040817_create_oops.rb
$ rails destroy model Oops
    notempty  db/migrate
    notempty  db
          rm  db/migrate/20081221040817_create_oops.rb
          rm  test/fixtures/oops.yml
          rm  test/unit/oops_test.rb
          rm  app/models/oops.rb
    notempty  test/fixtures
    notempty  test
    notempty  test/unit
    notempty  test
    notempty  app/models
    notempty  app
</shell>

h3. Rake

Rake is Ruby Make, a standalone Ruby utility that replaces the Unix utility 'make', and uses a 'Rakefile' and +.rake+ files to build up a list of tasks. In Rails, Rake is used for common administration tasks, especially sophisticated ones that build off of each other.

You can get a list of Rake tasks available to you, which will often depend on your current directory, by typing +rake --tasks+. Each task has a description, and should help you find the thing you need.

<shell>
$ rake --tasks
(in /home/foobar/commandsapp)
rake db:abort_if_pending_migrations       # Raises an error if there are pending migrations
rake db:charset                           # Retrieves the charset for the current environment's database
rake db:collation                         # Retrieves the collation for the current environment's database
rake db:create                            # Create the database defined in config/database.yml for the current Rails.env
...
...
rake tmp:pids:clear                       # Clears all files in tmp/pids
rake tmp:sessions:clear                   # Clears all files in tmp/sessions
rake tmp:sockets:clear                    # Clears all files in tmp/sockets
</shell>

h4. +about+

<tt>rake about</tt> gives information about version numbers for Ruby, RubyGems, Rails, the Rails subcomponents, your application's folder, the current Rails environment name, your app's database adapter, and schema version. It is useful when you need to ask for help, check if a security patch might affect you, or when you need some stats for an existing Rails installation.

<shell>
$ rake about
About your application's environment
Ruby version              1.8.7 (x86_64-linux)
RubyGems version          1.3.6
Rack version              1.3
Rails version             3.2.0.beta
JavaScript Runtime        Node.js (V8)
Active Record version     3.2.0.beta
Action Pack version       3.2.0.beta
Active Resource version   3.2.0.beta
Action Mailer version     3.2.0.beta
Active Support version    3.2.0.beta
Middleware                ActionDispatch::Static, Rack::Lock, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport
Application root          /home/foobar/commandsapp
Environment               development
Database adapter          sqlite3
Database schema version   20110805173523
</shell>

h4. +assets+

You can precompile the assets in <tt>app/assets</tt> using <tt>rake assets:precompile</tt> and remove those compiled assets using <tt>rake assets:clean</tt>.

h4. +db+

The most common tasks of the +db:+ Rake namespace are +migrate+ and +create+, and it will pay off to try out all of the migration rake tasks (+up+, +down+, +redo+, +reset+). +rake db:version+ is useful when troubleshooting, telling you the current version of the database.

More information about migrations can be found in the "Migrations":migrations.html guide.

h4. +doc+

The +doc:+ namespace has the tools to generate documentation for your app, API documentation, guides. Documentation can also be stripped which is mainly useful for slimming your codebase, like if you're writing a Rails application for an embedded platform.

* +rake doc:app+ generates documentation for your application in +doc/app+.
* +rake doc:guides+ generates Rails guides in +doc/guides+.
* +rake doc:rails+ generates API documentation for Rails in +doc/api+.
* +rake doc:plugins+ generates API documentation for all the plugins installed in the application in +doc/plugins+.
* +rake doc:clobber_plugins+ removes the generated documentation for all plugins.

h4. +notes+

+rake notes+ will search through your code for comments beginning with FIXME, OPTIMIZE or TODO. The search is done in files with extension +.builder+, +.rb+, +.erb+, +.haml+ and +.slim+ for both default and custom annotations.

<shell>
$ rake notes
(in /home/foobar/commandsapp)
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] any other way to do this?
  * [132] [FIXME] high priority for next deploy

app/model/school.rb:
  * [ 13] [OPTIMIZE] refactor this code to make it faster
  * [ 17] [FIXME]
</shell>

If you are looking for a specific annotation, say FIXME, you can use +rake notes:fixme+. Note that you have to lower case the annotation's name.

<shell>
$ rake notes:fixme
(in /home/foobar/commandsapp)
app/controllers/admin/users_controller.rb:
  * [132] high priority for next deploy

app/model/school.rb:
  * [ 17]
</shell>

You can also use custom annotations in your code and list them using +rake notes:custom+ by specifying the annotation using an environment variable +ANNOTATION+.

<shell>
$ rake notes:custom ANNOTATION=BUG
(in /home/foobar/commandsapp)
app/model/post.rb:
  * [ 23] Have to fix this one before pushing!
</shell>

NOTE. When using specific annotations and custom annotations, the annotation name (FIXME, BUG etc) is not displayed in the output lines.

h4. +routes+

+rake routes+ will list all of your defined routes, which is useful for tracking down routing problems in your app, or giving you a good overview of the URLs in an app you're trying to get familiar with.

h4. +test+

INFO: A good description of unit testing in Rails is given in "A Guide to Testing Rails Applications":testing.html

Rails comes with a test suite called <tt>Test::Unit</tt>. Rails owes its stability to the use of tests. The tasks available in the +test:+ namespace helps in running the different tests you will hopefully write.

h4. +tmp+

The <tt>Rails.root/tmp</tt> directory is, like the *nix /tmp directory, the holding place for temporary files like sessions (if you're using a file store for files), process id files, and cached actions.

The +tmp:+ namespaced tasks will help you clear the <tt>Rails.root/tmp</tt> directory:

* +rake tmp:cache:clear+ clears <tt>tmp/cache</tt>.
* +rake tmp:sessions:clear+ clears <tt>tmp/sessions</tt>.
* +rake tmp:sockets:clear+ clears <tt>tmp/sockets</tt>.
* +rake tmp:clear+ clears all the three: cache, sessions and sockets.

h4. Miscellaneous

* +rake stats+ is great for looking at statistics on your code, displaying things like KLOCs (thousands of lines of code) and your code to test ratio.
* +rake secret+ will give you a pseudo-random key to use for your session secret.
* <tt>rake time:zones:all</tt> lists all the timezones Rails knows about.

h3. The Rails Advanced Command Line

More advanced use of the command line is focused around finding useful (even surprising at times) options in the utilities, and fitting those to your needs and specific work flow. Listed here are some tricks up Rails' sleeve.

h4. Rails with Databases and SCM

When creating a new Rails application, you have the option to specify what kind of database and what kind of source code management system your application is going to use. This will save you a few minutes, and certainly many keystrokes.

Let's see what a +--git+ option and a +--database=postgresql+ option will do for us:

<shell>
$ mkdir gitapp
$ cd gitapp
$ git init
Initialized empty Git repository in .git/
$ rails new . --git --database=postgresql
      exists
      create  app/controllers
      create  app/helpers
...
...
      create  tmp/cache
      create  tmp/pids
      create  Rakefile
add 'Rakefile'
      create  README.rdoc
add 'README.rdoc'
      create  app/controllers/application_controller.rb
add 'app/controllers/application_controller.rb'
      create  app/helpers/application_helper.rb
...
      create  log/test.log
add 'log/test.log'
</shell>

We had to create the *gitapp* directory and initialize an empty git repository before Rails would add files it created to our repository. Let's see what it put in our database configuration:

<shell>
$ cat config/database.yml
# PostgreSQL. Versions 8.2 and up are supported.
#
# Install the ruby-postgres driver:
#   gem install ruby-postgres
# On Mac OS X:
#   gem install ruby-postgres -- --include=/usr/local/pgsql
# On Windows:
#   gem install ruby-postgres
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
development:
  adapter: postgresql
  encoding: unicode
  database: gitapp_development
  pool: 5
  username: gitapp
  password:
...
...
</shell>

It also generated some lines in our database.yml configuration corresponding to our choice of PostgreSQL for database.

NOTE. The only catch with using the SCM options is that you have to make your application's directory first, then initialize your SCM, then you can run the +rails new+ command to generate the basis of your app.

h4(#different-servers). +server+ with Different Backends

Many people have created a large number of different web servers in Ruby, and many of them can be used to run Rails. Since version 2.3, Rails uses Rack to serve its webpages, which means that any webserver that implements a Rack handler can be used. This includes WEBrick, Mongrel, Thin, and Phusion Passenger (to name a few!).

NOTE: For more details on the Rack integration, see "Rails on Rack":rails_on_rack.html.

To use a different server, just install its gem, then use its name for the first parameter to +rails server+:

<shell>
$ sudo gem install mongrel
Building native extensions.  This could take a while...
Building native extensions.  This could take a while...
Successfully installed gem_plugin-0.2.3
Successfully installed fastthread-1.0.1
Successfully installed cgi_multipart_eof_fix-2.5.0
Successfully installed mongrel-1.1.5
...
...
Installing RDoc documentation for mongrel-1.1.5...
$ rails server mongrel
=> Booting Mongrel (use 'rails server webrick' to force WEBrick)
=> Rails 3.1.0 application starting on http://0.0.0.0:3000
...
</shell>
